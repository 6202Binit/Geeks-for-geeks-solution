Given an increasing sequence a[], we need to find the K-th missing contiguous element in the increasing sequence which is not present in the sequence. If no k-th missing element is there output -1.

Example 1:

Input : arr[ ] = {1, 3, 4, 5, 7} and K = 2
Output : 6
Explanation:
K = 2, We need to find the 2nd missing 
number in the array. Missing numbers are 
2 and 6. So 2nd missing number is 6.
 

Example 2:

Input : arr[ ] = {1, 2, 3, 4, 5, 6} 
Output :  -1 
 

Your Task:
This is a function problem. The input is already taken care of by the driver code. You only need to complete the function KthMissingElement() that takes an array (arr), sizeOfArray (n), an integer K and return the Kth missing number if present otherwise returns -1. The driver code takes care of the printing.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

 

Constraints:
1 ≤ N, K, A[i] ≤ 105


solution


class Complete{
    
  
    int KthMissingElement(int arr[], int n, int k)
    {
        // Complete the function
    HashMap<Integer, Integer> umap
            = new HashMap<Integer, Integer>();
        int mins = 99999;
        int maxs = -99999;
        for (int i = 0; i < n; i++) {
            umap.put(
                arr[i],
                1); 
            if (mins > arr[i])
                mins = arr[i]; 
            if (maxs < arr[i])
                maxs = arr[i]; 
        }
        int counts = 0;
 
    
        for (int i = mins; i <= maxs; i++) {
            if (umap.get(i) == null)
                counts++;
            if (counts == k)
                return i;
        }
        return -1;
  
    }
    
}
